webpackJsonp([0xc1f4f8b4799b],{1389:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Justin Ball",author:"Justin Ball"}},markdownRemark:{id:"/Users/jbasdf/projects/justinball/src/posts/2014-03-16-refactoring-and-making-promises/index.md absPath of file >>> MarkdownRemark",html:"<p>After spending the last year writing Ember.js code I've realized one really big thing - Ember is about promises.\nI recently had a chance to refactor some code with a number of asynchrounous calls. The original logic used\ntimers and polling to monitor the state of a bunch of recursive calls to the Google API to retrieve a complete\nfolder structure. Timers get the job done, but promises make it elegant.</p>\n<h4>Original Code</h4>\n<p>Requirement: wait until the entire tree is loaded before transition.</p>\n<pre><code class=\"javascript\">\nApp.GoogleFile = Ember.Object.extend({\n});\n<p>App.ApplicationRoute = Ember.Route.extend({</p>\n<p>  model: function(){\nvar model = App.GoogleFile.create({\nid: $('meta[name=\"google-folder-id\"]').attr('content');\nchildren: Ember.ArrayProxy.create({content: []})\n});\nthis.loadChildren(model.get('children'));\nreturn model;\n},</p>\n<p>  afterModel: function(transition){\nif(transition.targetName == \"application.index\"){\nthis.wait(model.get('children'), function(){\nthis.transitionTo('anotherPlace');\n});\n}\n},</p>\n<p>  // Waiting for content to load using a timer.\nwait: function(children, callback){\nif(Ember.isEmpty(children)){\nEmber.run.later(this, function () {\nthis.wait(children);\n}, 10);\n} else {\ncallback(children);\n}\n},</p>\n<p>  loadChildren: function(node){\nvar token = $('meta[name=\"google-access-token\"]').attr('content');\nvar query = encodeURIComponent('\"' + node.get('id') + '\" in parents');\n$.get('<a href=\"https://www.googleapis.com/drive/v2/files?q=\">https://www.googleapis.com/drive/v2/files?q=</a>' + query + '&#x26;access_token=' + token, function(data){\ndata.items.forEach(function(item){\nvar f = App.GoogleFile.create({\nname: item.title,\nid: item.id,\nicon: item.iconLink,\nmime: item.mimeType,\nembed: item.embedLink,\nedit: item.alternateLink,\nchildren: Ember.ArrayProxy.create({content: []})\n});\nif(item.mimeType === \"application/vnd.google-apps.folder\"){\nthis.loadChildren(f);\n}\nnode.get('children').pushObject(f);\n}.bind(this));\n}.bind(this));\n}</p>\n<p>});</p>\n</pre></code>\n<h4>The Refactored Code</h4>\n<pre><code class=\"javascript\">\n<p>App = Ember.Application.create({\n});</p>\n<p>App.GoogleFile = Ember.Object.extend({\n});</p>\n<p>App.ApplicationRoute = Ember.Route.extend({</p>\n<p>  model: function(){\nvar model = App.GoogleFile.create({\nid: $('meta[name=\"google-folder-id\"]').attr('content');,\nchildren: Ember.ArrayProxy.create({content: []})\n});</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>return new Ember.RSVP.Promise(function(resolve, reject){\n  this.loadChildren(model, resolve, reject);\n}.bind(this));</code></pre>\n      </div>\n<p>  },</p>\n<p>  // The afterModel won't fire until the promise is fullfilled.\nafterModel: function(transition){\nif(transition.targetName == \"application.index\"){\nthis.transitionTo('anotherPlace');\n}\n},</p>\n<p>  loadChildren: function(node, resolve, reject){\nvar token = $('meta[name=\"google-access-token\"]').attr('content');\nvar query = encodeURIComponent('\"' + node.get('id') + '\" in parents');\n// Don't resolve the promise when the ajax call returns. We have to process the data and decide if we need to make more calls.\n$.get('<a href=\"https://www.googleapis.com/drive/v2/files?q=\">https://www.googleapis.com/drive/v2/files?q=</a>' + query + '&#x26;access_token=' + token, function(data){\nvar promises = [];\ndata.items.forEach(function(item){\nvar f = App.GoogleFile.create({\nname: item.title,\nid: item.id,\nicon: item.iconLink,\nmime: item.mimeType,\nembed: item.embedLink,\nedit: item.alternateLink,\nchildren: Ember.ArrayProxy.create({content: []})\n});</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>    if(item.mimeType === \"application/vnd.google-apps.folder\"){\n      // We need to make more ajax calls. Create a new promise which can be resposible for\n      // resolving existing promises once it is fullfilled.\n      var promise = new Ember.RSVP.Promise(function(resolve, reject){\n        this.loadChildren(f, resolve, reject);\n      }.bind(this));\n      promises.push(promise);\n    }\n    node.get('children').pushObject(f);\n  }.bind(this));\n\n  Promise.all(promises).then(function(){\n    resolve(node);\n  });\n\n}.bind(this));</code></pre>\n      </div>\n<p>  }</p>\n<p>});</p>\n</pre></code>\n<p><a href=\"http://jsbin.com/koveg/6/edit?html,js,console\" target=\"_blank\">Working refactored code snippet on jsbin</a></p>",frontmatter:{title:"Refactoring and Making Promises",date:"March 16, 2014",imageUrl:null,image:null}}},pathContext:{path:"/refactoring-and-making-promises"}}}});
//# sourceMappingURL=path---refactoring-and-making-promises-55b43fcbe2712dcc5a76.js.map