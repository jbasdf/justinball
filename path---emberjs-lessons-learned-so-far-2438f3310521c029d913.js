webpackJsonp([0xfa739c344015],{1951:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Justin Ball",author:"Justin Ball"}},markdownRemark:{id:"/Users/jbasdf/projects/justinball/src/posts/2014-03-15-emberjs-lessons-learned-so-far/index.md absPath of file >>> MarkdownRemark",html:'<div class="slides">\n  <section>\n    <h1>Ember.js</h1>\n    <h3>Lessons Learned and Stuff</h3>\n    <p>\n      <small><a href="http://www.justinball.com">Justin Ball</a> / <a href="http://twitter.com/jbasdf">@jbasdf</a></small>\n    </p>\n  </section>\n  <section>\n    <div class="left">\n      <h2>Justin Ball</h2>\n    </div>\n    <div class="right">\n      <ul>\n        <li>CTO <a href="http://www.atomicjolt.com">Atomic Jolt</a></li>\n        <li>Consultant, Rubyist, Javascriptist, Cyclist, Maker, Entrepreneur</li>\n        <li>Purveyor of Buzzwords</li>\n      </ul>\n    </div>\n  </section>\n  <section>\n    <section>\n      <h2>What is Ember.js?</h2>\n      <div class="block">\n        <ul>\n          <li>A framework for creating ambitious web applications.</li>\n          <li>Client-side MVC Framework</li>\n          <li><a href="https://github.com/emberjs/ember.js">Open Source</a> - <a href="https://github.com/emberjs/ember.js/pulse/monthly">Github Pulse</a></li>\n          <li>Single page apps are sexy</li>\n          <li>Ember.js makes it easy*</li>\n        </ul>\n      </div>\n      <div class="block">\n        <p class="small">* Easy is exclusive of the tears shed while learning Ember.js</p>\n      </div>\n    </section>\n    <section>\n      <h2>Why Single Page Apps?</h2>\n      <p class="fragment roll-in">iFrames!</p>\n      <p class="fragment roll-in">Safari and IE no longer let you write a cookie to an iFrame unless the user has visited the site</p>\n      <p class="fragment roll-in">Real World - LTI apps</p>\n    </section>\n  </section>\n  <section>\n    <h2>Heads Up</h2>\n    <ul>\n      <li>Ember.js changes a lot</li>\n      <li>Ignore anything over 3 or 4 months old</li>\n      <li>When you choose Ember.js you are all in</li>\n    </ul>\n  </section>\n  <section>\n    <section>\n      <h2>Using Rails?</h2>\n      <p><a href="https://github.com/emberjs/ember-rails">Ember.js Rails Gem</a></p>\n      <pre><code data-trim contenteditable>\ngem \'ember-rails\'\ngem \'ember-source\', \'1.4.0\' # or the version you need\n      </code></pre>\n      <pre><code data-trim contenteditable>\n//= require handlebars\n//= require ember\n//= require ember-data\n      </code></pre>\n    </section>\n    <section>\n      Why choose the gem over anything else?\n    </section>\n    <section>\n      <a href="http://yehudakatz.com/">Yehuda Katz</a>\n    </section>\n  </section>\n  <section>\n    <section>\n      <h2>AMD?</h2>\n      <p class="fragment block">I love require.js</p>\n      <p class="fragment block">fogetaboutit</p>\n      <p class="fragment block">Or Try <a href="http://ryanflorence.com/">Ryan Florence\'s</a> <a href="https://github.com/rpflorence/ember-tools">Ember Tools*</a></p>\n      <p class="fragment block small"><a href="building-with-ember#select_doesnt_work">*See "Ember Select doesn\'t work" on this page to learn about the dangers</a></p>\n    </section>\n    <section>\n      <h2>Feel Good About Polluting The Global Namespace</h2>\n      <pre><code data-trim contenteditable>\nApp = Ember.Application.create({\n});\n      </code></pre>\n    </section>\n  </section>\n  <section>\n    <h2>I don\'t do Rails</h2>\n    <div class="block">\n      <p class="fragment roll-in">Try</p>\n      <p class="fragment roll-in"><a href="https://github.com/stefanpenner/ember-app-kit">Ember App Kit</a></p>\n    </div>\n  </section>\n  <section>\n    <section>\n      <h2>Ember.js and AngularJS</h2>\n      <p>Everything is Awesome</p>\n      <p>\n        <a href="https://docs.google.com/presentation/d/1e0z1pT9JuEh8G5DOtib6XFDHK0GUFtrZrU3IfxJynaA/preview?sle=true#slide=id.p">\n          AngularJS from an Ember perspective\n        </a>\n      </p>\n    </section>\n    <section>\n      <iframe src="https://docs.google.com/presentation/d/1e0z1pT9JuEh8G5DOtib6XFDHK0GUFtrZrU3IfxJynaA/preview?sle=true#slide=id.p&embedded=true" width="600" height="780" style="border: none;"></iframe>\n    </section>\n  </section>\n  <section>\n    <section>\n      <h2>Ember.js is Magic!</h2>\n      <p class="fragment roll-in">Except for when it\'s not</p>\n    </section>\n    <section>\n      <h2><a href="building-with-ember#error_messages">Debugging</a></h2>\n      <p>The Bug</p>\n      <blockquote>\n        Assertion failed: Cannot call get with \'id\' on an undefined object. application.js?body=1:16925\n        Uncaught TypeError: Cannot read property \'__ember1375726885234_meta\' of undefined\n      </blockquote>\n      <p>The Code</p>\n      <pre><code data-trim contenteditable>\nvar map = MapModel.createRecord({\n  title: \'New Map\'\n});\nmap.save().then(function(){\n  this.transitionTo(\'map\', map);\n}.bind(this));\n      </code></pre>\n      <p class="fragment roll-in">The Cause?</p>\n      <p class="fragment roll-in">Failure to call \'transition.abort();\'</p>\n    </section>\n    <section>\n      <h2><a href="building-with-ember#error_messages">Now We Know Better</a></h2>\n      <blockquote>\n      Assertion failed: Cannot call get with \'id\' on an undefined object. application.js?body=1:17079\n      Uncaught TypeError: Cannot read property \'__ember1375989556474_meta\' of undefined application.js?body=1:18391\n      Trying to get configured shortcut getDocumentSelection.js:51\n      Assertion failed: Emptying a view in the inBuffer state is not allowed and should not happen under normal circumstances. Most likely there is a bug in your application. This may be due to excessive property change notifications.\n      </blockquote>\n      <pre><code data-trim contenteditable>\n{% raw %}\n&lt;li&gt;{{#linkTo \'map.destroy\' title=&quot;Delete the current map&quot;}}&lt;i class=&quot;icon-trash&quot;&gt;&lt;/i&gt; Delete{{/linkTo}}&lt;/li&gt;\n{% endraw %}\n      </code></pre>\n      <p class="fragment roll-in">No we don\'t. \'map\' was null.</p>\n    </section>\n    <section>\n      <h2><a href="building-with-ember#error_messages_again">Now That We\'re Experts</a></h2>\n      <blockquote>\n      Assertion failed: Cannot call get with \'id\' on an undefined object. ember.js?body=1:364\n      Uncaught TypeError: Cannot read property \'__ember1377186615643_meta\' of undefined ember.js?body=1:1676\n      Assertion failed: Emptying a view in the inBuffer state is not allowed and should not happen under normal circumstances. Most likely there is a bug in your application. This may be due to excessive property change notifications. ember.js?body=1:364\n      Uncaught Error: You cannot modify child views while in the inBuffer state ember.js?body=1:18835\n      </blockquote>\n      <p class="fragment roll-in">"Most likely there is a bug in your application"</p>\n      <p class="fragment roll-in">Would not have guessed that</p>\n    </section>\n    <section>\n      <p>Bad Code</p>\n      <pre><code data-trim contenteditable>\n{% raw %}\n{{#each post in Posts}}\n  {{#linkTo \'posts.show\' title="View post"}}{{post.name}}{{/linkTo}}\n{{/each}}\n{% endraw %}\n      </pre></code>\n      <p>Good Code</p>\n      <pre><code data-trim contenteditable>\n{% raw %}\n{{#each post in Posts}}\n  {{#linkTo \'posts.show\' post title="View post"}}{{post.name}}{{/linkTo}}\n{{/each}}\n{% endraw %}\n      </pre></code>\n      <p class="fragment roll-in">Forgot to include \'post\'</p>\n    </section>\n  </section>\n  <section>\n    <section>\n      <h2><a href="dont-forget-your-period-computed-property-that-depends-on-ember_arraycontroller-contents">(Really) Little Things Matter</a></h2>\n      <pre><code data-trim contenteditable>\nApp.ContactController = Ember.ObjectController.extend({\n  needs: [\'selected_contacts\'],\n  selectedContacts: null,\n  selectedContactsBinding: \'controllers.selected_contacts.content\',\n<p>  isSelected: function(){\nconsole.log(\'Checking Selected for\' + this.get(\'name\'));\nreturn this.selectedContacts.contains(this.get(\'content\'));\n}.property(\'selectedContacts@each\')</p>\n<p>});\n</code></pre>\n<p class="fragment roll-in">It looks like the #$%#! sample code.</p>\n<p class="fragment roll-in">But isSelected never fires!!!!</p>\n</section>\n<section>\n<h2>I see you still use email</h2>\n<p>Bad</p>\n<pre><code data-trim contenteditable>\nproperty(\'selectedContacts@each\')\n</code></pre>\n<p>Good</p>\n<pre><code data-trim contenteditable>\nproperty(\'selectedContacts.@each\')\n</code></pre>\n</section></p>\n  </section>\n  <section>\n    <section>\n      <h2>Multiple Ember Apps in a Rails App</h2>\n      <p>Stay DRY. Share code</p>\n    </section>\n    <section>\n      <p>Setup to reuse code from \'Common\'</p>\n      <pre><code class="more_code">\nCommon\n  components\n  helpers\n  models\n  mixins\n  templates\nSomethingAwesome\n  controllers\n  helpers\n  mixins\n  routes\n  templates\n  views\nAdmin\n  controllers\n  helpers\n  mixins\n  routes\n  templates\n  views\n      </code></pre>\n    </section>\n    <section>\n      <h2>The Problem</h2>\n      <p>Ember won\'t be able to find your templates</p>\n    </section>\n    <section>\n      <h2>The Solution</h2>\n      <p>Override the Resolver</p>\n      <pre><code data-trim contenteditable>\nAppNamespace = \'SomethingAwesome\';\nSomethingAwesome = Ember.Application.create({\n<p>  Resolver: Ember.DefaultResolver.extend({\nresolveTemplate: function(parsedName){\nvar fullNameWithoutType = parsedName.fullNameWithoutType;\nparsedName.fullNameWithoutType = AppNamespace + "/" + fullNameWithoutType;\nvar result = this.<em>super(parsedName);\nif(!result){\nparsedName.fullNameWithoutType = "common/" + fullNameWithoutType;\nresult = this.</em>super(parsedName);\n}\nreturn result;\n}\n})</p>\n<p>});\n</code></pre>\n<p><a href="https://github.com/tatemae/oea">Check out Open Assessments source for an example</a></p>\n</section></p>\n  </section>\n  <section>\n    <section>\n      <h2>Transitions</h2>\n      <p>Do This Infinitely</p>\n      <pre><code data-trim contenteditable>\nApp.ApplicationRoute = Ember.Route.extend({\n<p>  model: function(){\nreturn this.store.find(\'user\', params.user_id);\n},</p>\n<p>  afterModel: function(transition){\nthis.transitionTo(\'anotherPlace\');\n}\n});\n</code></pre>\n</section>\n<section>\n<p>Check Your Target</p>\n<pre><code data-trim contenteditable>\nApp.ApplicationRoute = Ember.Route.extend({</p>\n<p>  model: function(){\nreturn this.store.find(\'user\', params.user_id);\n},</p>\n<p>  afterModel: function(transition){\nif(transition.targetName == "application.index"){\nthis.transitionTo(\'anotherPlace\');\n}\n}\n});\n</code></pre>\n</section></p>\n  </section>\n  <section>\n    <h2><a href="building-with-ember">Choose your event names wisely</a></h2>\n    <p>\'destroy\' is reserved</p>\n    <pre><code data-trim contenteditable>\n    {% raw %}\n&lt;a href=&quot;#&quot; {{action \'destroy\'}} class=&quot;btn&quot;&gt;Delete&lt;/a&gt;\n    {% endraw %}\n    </code></pre>\n    <p>\'destroy_node\' is not</p>\n    <pre><code data-trim contenteditable>\n    {% raw %}\n&lt;a href=&quot;#&quot; {{action \'destroy_node\'}} class=&quot;btn&quot;&gt;Delete&lt;/a&gt;\n    {% endraw %}\n    </code></pre>\n  </section>\n  <section>\n    <h2><a href="building-with-ember">Set controller for route</a></h2>\n    <pre><code data-trim contenteditable>\nvar ThingEditRoute = Ember.Route.extend({\n  controllerName: \'thing\',\n  renderTemplate: function(controller, model){\n    // You have to pass the controller to render or it will generate a new controller\n    this.render({ controller: controller, into: \'application\', outlet: \'modal\' });\n  }\n});\n    </code></pre>\n    <p>Looks easy but couldn\'t find the docs</p>\n  </section>\n  <section>\n    <h2><a href="pass-attributes-to-an-emberjs-view">Pass a Value to a View</a></h2>\n    <p>Add a property to your view:</p>\n    <pre><code data-trim contenteditable>\nApp.ModalView = Ember.View.extend({\n  aClassName: \'modal\'\n});\n    </code></pre>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;p&gt;Use the value in your view template:&lt;/p&gt;\n&lt;pre&gt;&lt;code data-trim contenteditable&gt;\n{% raw %}</code></pre>\n      </div>\n<p>&#x3C;div {{bindAttr class="view.aClassName"}}>\nMore stuff here\n&#x3C;/div>\n{% endraw %}\n</code></pre></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;p&gt;When you use the view just set the property:&lt;/p&gt;\n&lt;pre&gt;&lt;code data-trim contenteditable&gt;\n{% raw %}</code></pre>\n      </div>\n<p>{{#view App.ModalView aClassName="wide_modal"}}\nSome great content goes here\n{{/view}}\n{% endraw %}\n</code></pre></p>\n  </section>\n  <section>\n    <section>\n      <h2><a href="immutable-arrays-in-ember">Immutable Arrays</a></h2>\n      <p>Adding parameters to \'find\' results in an immutable model</p>\n      <pre><code data-trim contenteditable>\nApp.ApplicationRoute = Ember.Route.extend({\n  model: function(){\n    return this.store.find(\'course\', {user_id: user_id});\n  }\n});\n      </code></pre>\n    </section>\n    <section>\n      <p>Use an ArrayProxy to builid a collection that can be modified</p>\n      <pre><code data-trim contenteditable>\nApp.ApplicationRoute = Ember.Route.extend({\n  model: function(){\n    var courses = Ember.ArrayProxy.create({content: []});\n    this.store.find(\'courses\', user_id: user_id}).then(function(data){\n      data.forEach(function(course){\n        if(!courses.contains(course)){\n          courses.pushObject(course);\n        }\n      }.bind(this));\n    }.bind(this));\n    return courses;\n  }\n});\n      </code></pre>\n      <p class="fragment block">But then you have to manually keep the collection updated.</p>\n    </section>\n    <section>\n      <h2>Even Better - Filters!</h2>\n      <pre><code data-trim contenteditable>\nvar filter = this.store.filter(\'course\', function(course){\n  return !course.get(\'user_id\') == userId;\n});\nthis.controllerFor(\'courses\').set(\'model\', filter);\n<p>// Load all courses into the store.\nEmber.run.once(this, function(){\nthis.store.find(\'course\');\n});\n</code></pre>\n</section></p>\n  </section>\n  <section>\n    <section>\n      <h2>What about Ember Data?</h2>\n      <p class="fragment block">Beta</p>\n      <p class="fragment block">Rapidly evolving</p>\n      <div class="fragment block">\n        <p>Not Production Ready*</p>\n        <div class="block">\n          <p class="small">* We use it in production anyway</p>\n        </div>\n      </div>\n    </section>\n    <section>\n      <h2>More Ember Data</h2>\n      <p>All pre-beta examples on the internet are now wrong</p>\n      <p><a href="https://github.com/emberjs/data/blob/master/TRANSITION.md">Let the Ember Data Transition Guide Take You to a Happy Place</a></p>\n      <p>1.0 Beta changed to reduce dependance on global application object</p>\n    </section>\n    <section>\n      <div class="left">\n        <p>Ember Data 0.13</p>\n        <pre><code data-trim contenteditable>\nApp.Post.find();\nApp.Post.find(params.post_id);\n        </code></pre>\n      </div>\n      <div class="right">\n        <p>Ember Data 1.0.beta.1:</p>\n        <pre><code data-trim contenteditable>\nthis.store.find(\'post\');\nthis.store.find(\'post\', params.post_id);\n        </code></pre>\n      </div>\n    </section>\n    <section>\n      <div class="left">\n        <p>Ember Data 0.13</p>\n        <pre><code data-trim contenteditable>\nApp.Post.createRecord();\n        </code></pre>\n      </div>\n      <div class="right">\n        <p>Ember Data 1.0.beta.1:</p>\n        <pre><code data-trim contenteditable>\nthis.store.createRecord(\'post\');\n        </code></pre>\n      </div>\n    </section>\n  </section>\n  <section>\n    <h2>I already have Rails models</h2>\n    <p><a href="generate-ember.js-models-using-your-rails-schema">Generate Ember.js Models Using Your Rails Schema*</a><p>\n    <pre><code class="more_code" data-trim contenteditable>\nnamespace :ember do\n<p>  desc "Build ember models from schema"\ntask :models => :environment do</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># Change these values to fit your project\nnamespace = &#39;App&#39; # The Ember application&#39;s namespace.\n\n# The directory where ember models will be written. We drop them\n# in the tmp directory since we might not want an ember model for every table in the\n# database.\noutput_dir = File.join(Rails.root, &quot;tmp/ember_models&quot;)\n\nschema_file = File.join(Rails.root, &#39;db/schema.rb&#39;)\n\ncurrent = &#39;&#39;\nfile = &#39;&#39;\nmax = 0\nattrs = []\n\nFile.readlines(schema_file).each do |line|\n\n  # Stuff to ignore\n  next if line.strip.blank?\n  next if /#.*/.match(line)\n  next if /add_index.+/.match(line)\n  next if /ActiveRecord::Schema.define/.match(line)\n\n  # Find tables in the schema\n  if m = /create_table \\&quot;(.+)\\&quot;.*/.match(line)\n    current = &quot;#{namespace}.#{m.captures[0].classify.singularize} = DS.Model.extend({\\n&quot;\n    file = &quot;#{m.captures[0].singularize}.js&quot;\n  elsif m = /t\\.(.+)\\s+&quot;([0-9a-zA-z_]+)&quot;.*/.match(line)\n    max = m.captures[1].length if m.captures[1].length &gt; max\n    attrs &lt;&lt; m.captures\n  elsif m = /end/.match(line) &amp;&amp; current.present?\n    attrs.each_with_index do |attr, i|\n      spaces = &#39;&#39;\n      type = &#39;string&#39;\n      if %w(integer float).include?(attr[0])\n        type = &#39;number&#39;\n      elsif %w(datetime time date).include?(attr[0])\n        type = &#39;date&#39;\n      elsif %w(boolean).include?(attr[0])\n        type = &#39;boolean&#39;\n      end\n      comma = &#39;,&#39;\n      if attrs.size-1 == i\n        comma=&#39;&#39;\n      end\n      ((max + 1) - attr[1].length).times{spaces &lt;&lt; &#39; &#39;}\n      if attr[1].ends_with?(&#39;_id&#39;)\n        relation = attr[1][0...(attr[1].length-3)]\n        current &lt;&lt; &quot;  #{relation}:    #{spaces}DS.belongsTo(&#39;#{relation.camelize(:lower).singularize}&#39;),\\n&quot;\n      end\n      current &lt;&lt; &quot;  #{attr[1]}: #{spaces}DS.attr(&#39;#{type}&#39;)#{comma}\\n&quot;\n    end\n    current &lt;&lt; &quot;});\\n&quot;\n    f = File.join(output_dir, file)\n    if File.exists?(f)\n      puts &quot;Ember model already exists: #{f}&quot;\n    else\n      current.gsub!(&#39;_spaces_&#39;, &#39;&#39;)\n      puts &quot;Writing Ember model: #{f}&quot;\n      File.open(f, &#39;w&#39;){|f| f.write(current)}\n    end\n\n    current = &#39;&#39;\n    file = &#39;&#39;\n    max = 0\n    attrs = []\n\n  else\n    if /end/.match(line).blank?\n      puts &quot;Don&#39;t know how to handle: #{line}&quot;\n    end\n  end\n\nend</code></pre>\n      </div>\n<p>  end</p>\n<p>end\n</code></pre>\n<p class="small">*It\'s not my fault if this code nukes your site or ruins your relationships.</p></p>\n  </section>\n  <section>\n    <section>\n      <h2>Ember is Full of Promises</h2>\n      <p class="fragment block">Think Asyncronous</p>\n    </section>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;section data-transition=&quot;linear&quot; data-background-transition=&quot;slide&quot;&gt;\n  &lt;h2&gt;Make a Promise&lt;/h2&gt;\n  &lt;h4&gt;Docs Show This&lt;/h4&gt;\n  &lt;pre&gt;&lt;code class=&quot;more_code&quot; data-trim contenteditable&gt;</code></pre>\n      </div>\n<p>return new Promise(function(resolve, reject){\n}.bind(this));\n</code></pre>\n<h4>But Do this</h4>\n<pre><code class="more_code" data-trim contenteditable>\nreturn new Ember.RSVP.Promise(function(resolve, reject){\n}.bind(this));\n</code></pre>\n</section></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;section data-transition=&quot;linear&quot; data-background=&quot;#c0392b&quot; data-background-transition=&quot;slide&quot;&gt;\n  &lt;h4&gt;Original&lt;/h4&gt;\n  &lt;p&gt;Requirement: wait until the entire tree is loaded before transition.&lt;/p&gt;\n  &lt;pre&gt;&lt;code class=&quot;more_code&quot; data-trim contenteditable&gt;</code></pre>\n      </div>\n<p>App.GoogleFile = Ember.Object.extend({\n});</p>\n<p>App.ApplicationRoute = Ember.Route.extend({</p>\n<p>  model: function(){\nvar model = App.GoogleFile.create({\nid: $(\'meta[name="google-folder-id"]\').attr(\'content\');\nchildren: Ember.ArrayProxy.create({content: []})\n});\nthis.loadChildren(model.get(\'children\'));\nreturn model;\n},</p>\n<p>  afterModel: function(transition){\nif(transition.targetName == "application.index"){\nthis.wait(model.get(\'children\'), function(){\nthis.transitionTo(\'anotherPlace\');\n});\n}\n},</p>\n<p>  // Waiting for content to load using a timer.\nwait: function(children, callback){\nif(Ember.isEmpty(children)){\nEmber.run.later(this, function () {\nthis.wait(children);\n}, 10);\n} else {\ncallback(children);\n}\n},</p>\n<p>  loadChildren: function(node){\nvar token = $(\'meta[name="google-access-token"]\').attr(\'content\');\nvar query = encodeURIComponent(\'"\' + node.get(\'id\') + \'" in parents\');\n$.get(\'<a href="https://www.googleapis.com/drive/v2/files?q=">https://www.googleapis.com/drive/v2/files?q=</a>\' + query + \'&#x26;access_token=\' + token, function(data){\ndata.items.forEach(function(item){\nvar f = App.GoogleFile.create({\nname: item.title,\nid: item.id,\nicon: item.iconLink,\nmime: item.mimeType,\nembed: item.embedLink,\nedit: item.alternateLink,\nchildren: Ember.ArrayProxy.create({content: []})\n});\nif(item.mimeType === "application/vnd.google-apps.folder"){\nthis.loadChildren(f);\n}\nnode.get(\'children\').pushObject(f);\n}.bind(this));\n}.bind(this));\n}</p>\n<p>});\n</code></pre>\n</section></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;section data-transition=&quot;linear&quot; data-background-transition=&quot;slide&quot;&gt;\n  &lt;h4&gt;The Refactor&lt;/h4&gt;\n  &lt;pre&gt;&lt;code class=&quot;more_code&quot; data-trim contenteditable&gt;</code></pre>\n      </div>\n<p>App = Ember.Application.create({\n});</p>\n<p>App.GoogleFile = Ember.Object.extend({\n});</p>\n<p>App.ApplicationRoute = Ember.Route.extend({</p>\n<p>  model: function(){\nvar model = App.GoogleFile.create({\nid: $(\'meta[name="google-folder-id"]\').attr(\'content\');,\nchildren: Ember.ArrayProxy.create({content: []})\n});</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">return new Ember.RSVP.Promise(function(resolve, reject){\n  this.loadChildren(model, resolve, reject);\n}.bind(this));</code></pre>\n      </div>\n<p>  },</p>\n<p>  // The afterModel won\'t fire until the promise is fullfilled.\nafterModel: function(transition){\nif(transition.targetName == "application.index"){\nthis.transitionTo(\'anotherPlace\');\n}\n},</p>\n<p>  loadChildren: function(node, resolve, reject){\nvar token = $(\'meta[name="google-access-token"]\').attr(\'content\');\nvar query = encodeURIComponent(\'"\' + node.get(\'id\') + \'" in parents\');\n// Don\'t resolve the promise when the ajax call returns. We have to process the data and decide if we need to make more calls.\n$.get(\'<a href="https://www.googleapis.com/drive/v2/files?q=">https://www.googleapis.com/drive/v2/files?q=</a>\' + query + \'&#x26;access_token=\' + token, function(data){\nvar promises = [];\ndata.items.forEach(function(item){\nvar f = App.GoogleFile.create({\nname: item.title,\nid: item.id,\nicon: item.iconLink,\nmime: item.mimeType,\nembed: item.embedLink,\nedit: item.alternateLink,\nchildren: Ember.ArrayProxy.create({content: []})\n});</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">    if(item.mimeType === &quot;application/vnd.google-apps.folder&quot;){\n      // We need to make more ajax calls. Create a new promise which can be resposible for\n      // resolving existing promises once it is fullfilled.\n      var promise = new Ember.RSVP.Promise(function(resolve, reject){\n        this.loadChildren(f, resolve, reject);\n      }.bind(this));\n      promises.push(promise);\n    }\n    node.get(&#39;children&#39;).pushObject(f);\n  }.bind(this));\n\n  Promise.all(promises).then(function(){\n    resolve(node);\n  });\n\n}.bind(this));</code></pre>\n      </div>\n<p>  }</p>\n<p>});</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">  &lt;/code&gt;&lt;/pre&gt;\n  &lt;p&gt;&lt;a href=&quot;http://jsbin.com/koveg/6/edit?html,js,console&quot; target=&quot;_blank&quot;&gt;Working code snippet on jsbin&lt;/a&gt;&lt;/p&gt;\n&lt;/section&gt;</code></pre>\n      </div>\n  </section>\n  <section>\n    <section>\n      <h2>You\'re sitting around doing nothing And...</h2>\n      <pre><code class="more_code" data-trim contenteditable>\nvar Adapter = DS.RESTAdapter.extend({\n  ajaxError: function(jqXHR){\n    if(jqXHR.status == 401){\n      window.location.href = \'/users/sign_in?timeout=true\';\n    }\n    if(jqXHR){\n      jqXHR.then = null;\n    }\n    return jqXHR;\n  }\n});\n      </code></pre>\n    </section>\n    <section>\n      <h2>You have to warn me about these things</h2>\n      <pre><code class="more_code" data-trim contenteditable>\n&lt;div class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-hidden=&quot;true&quot;&gt;\n  &lt;div class=&quot;modal-dialog&quot;&gt;\n    &lt;div class=&quot;modal-content&quot;&gt;\n      &lt;div class=&quot;modal-header&quot;&gt;\n        &lt;button  type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/button&gt;\n        &lt;h4 class=&quot;modal-title&quot; id=&quot;tmModalLabel&quot;&gt;Inactivity Warning&lt;/h4&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;modal-body&quot;&gt;\n        You will be logged out in 30 seconds.\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n      </code></pre>\n    </section>\n    <section>\n      <h2>Component!</h2>\n      <pre><code class="more_code" data-trim contenteditable>\nApp.InactivityWarningComponent = Ember.Component.extend({\n<p>  active: false,\ninactiveTimeout: 12000000, // Amount of time before we redirect to the sign in screen - the session should have expired by this point. (20 minutes)\nwarningTimeout: 30000,     // Amount of time the user has to perform an action before the last keep alive fires - 30 seconds\ntimeout: 1170000,          // 19.5 minutes. We want to be less than the 20 minute timeout to be sure the session is renewed.</p>\n<p>  didInsertElement: function(){\n//if($(\'meta[name="in-development"]\').attr(\'content\')){ return; } // Uncomment and add a meta tag to your head if you want to avoid session timeout in development\nvar context = this;</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">var keepActive = function(){\n  if(context.active){\n    // Keep the session alive\n    $.ajax({\n      url: &quot;/stayin_alive&quot;\n    }).done(function(result){\n\n      // Go inactive until the user moves the mouse or presses a key\n      context.active = false;\n\n      // The user now has another 20 minutes before the session times out\n      // Restart the timer to keep the user logged in\n      Ember.run.later(context, keepActive, context.timeout);\n\n      // Set a timer to show a modal indicating the user is about to be logged out.\n      Ember.run.debounce(context, context.show, context.timeout - context.warningTimeout);\n\n      // Set a timer that will send the user to the login screen\n      Ember.run.debounce(context, context.forceLogin, context.inactiveTimeout);\n    });\n  }\n};\n\n$(window).mousemove(function(e){\n  context.active = true;\n  // Make sure the modal is hidden. This will cause the modal to hide if the user moves the mouse or presses a key.\n  // Use debounce so we don&#39;t call it over and over again since this method is called from mousemove\n  Ember.run.debounce(context, context.hide, 1000);\n});\n\n$(window).keypress(function(e){\n  context.active = true;\n  // Make sure the modal is hidden. This will cause the modal to hide if the user moves the mouse or presses a key.\n  context.hide();\n});\n\n// The user has 5 minutes before they are logged out. We need to send a keep Active before then.\nEmber.run.later(context, keepActive, context.timeout);</code></pre>\n      </div>\n<p>  },</p>\n<p>  forceLogin: function(){\nwindow.location.href = \'/users/sign_out?timeout=true\';\n},</p>\n<p>  show: function(){\n// Warn the user that they will be logged out if we are inactive\nif(this.active === false){\n// Start countdown timer\nthis.$(\'.modal\').modal(\'show\');\n}\n},</p>\n<p>  hide: function(){\nthis.$(\'.modal\').modal(\'hide\');\n}</p>\n<p>});\n</code></pre>\n<p><a href="session-timeout-for-your-ember-application">Ember.js Session Timeout In Depth</a></p>\n</section></p>\n  </section>\n  <section>\n    <section>\n      <h2><a href="ember-textfield-ignores-arrow-keys.-how-to-monitor-key-events-in-your-textfield">Monitor key events in your textfield</a></h2>\n      <p>Monitor changes as the user types</p>\n      <pre><code data-trim contenteditable>\n      {% raw %}\n{{ view Ember.Textfield\n  class="form-control"\n  placeholderBinding="controller.prompt"\n  valueBinding="controller.value"\n  onEvent="keyPress"\n  action="typing"\n}}\n      {% endraw %}\n      </code></pre>\n      <p class="fragment block">but keyPress doesn\'t fire when you press the arrow keys</p>\n    </section>\n    <section>\n      <p>No problem! Make your own Textfield</p>\n      <pre><code class="more_code" data-trim contenteditable>\nApp.Textfield = Ember.TextField.extend({\n<p>  init: function() {\nthis._super();\nthis.on("keyUp", this, this.interpretKeyEvents);\n},</p>\n<p>  interpretKeyEvents: function(event){\nvar map = TM.Textfield .KEY<em>EVENTS;\nvar method = map[event.keyCode];\nif (method){\nreturn this<a href="event">method</a>;\n} else {\nthis.</em>super(event);\n}\n},</p>\n<p>  arrowUp: function(event){\nthis.sendAction(\'arrow-up\', this, event);\n},</p>\n<p>  arrowDown: function(event){\nthis.sendAction(\'arrow-down\', this, event);\n}</p>\n<p>});</p>\n<p>App.Textfield.KEY_EVENTS = {\n38: \'arrowUp\',\n40: \'arrowDown\'\n};\n</code></pre>\n</section>\n<section>\n<p>Use that new code</p>\n<pre><code data-trim contenteditable>\n{% raw %}\n{{ view App.Textfield\nclass="form-control"\nplaceholderBinding="view.prompt"\nvalueBinding="view.value"\nviewName="inputField"\narrow-up="arrowUp"\narrow-down="arrowDown"\n}}\n{% endraw %}\n</code></pre>\n<p>Add \'arrowUp\' and \'arrowDown\' to your controller and be filled with joy.</p>\n</section></p>\n  </section>\n  <section>\n    <h1>THE END</h1>\n    <h3>Justin Ball</h3>\n    <p>justinball.com</p>\n    <p>justinball@gmail.com</p>\n    <p>@jbasdf</p>\n    <p class="small" style="display:none;"><a href="#pdf-export">Download PDF</a></p>\n  </section>\n</div>',frontmatter:{title:"Ember.js Lessons Learned So Far",date:"March 15, 2014",imageUrl:null,structuredHtml:null,image:null}}},pathContext:{}}}});
//# sourceMappingURL=path---emberjs-lessons-learned-so-far-2438f3310521c029d913.js.map